{
	"info": {
		"_postman_id": "2b9e270f-bc8a-48e4-a78e-7090c1497be0",
		"name": "Test Comments - Explore With Me",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26179121"
	},
	"item": [
		{
			"name": "Создание пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be greater than 0').to.not.be.null;\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"user1@user.com\"').to.eql('user1@user.com');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"user1\"').to.eql('user1');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"user1\",\r\n    \"email\": \"user1@user.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be greater than 0').to.not.be.null;\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"user2@user.com\"').to.eql('user2@user.com');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"user2\",\r\n    \"email\": \"user2@user.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Категория 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание события №1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\":\"Краткая аннотация события\",\r\n    \"category\": 1,\r\n    \"description\":\"Длинное писание события\",\r\n    \"eventDate\":\"2023-10-01 10:00:00\",\r\n    \"title\":\"Заголовок\",\r\n    \"location\":{\r\n        \"lat\":12.3568,\r\n        \"lon\":25.4586\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария для неопубликованного события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование события администратором (публикация)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с пустым текстом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен совпадать с отпрваленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Обновленный комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление коммментария пользователем (пустой текст)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
							"    pm.expect(target).to.have.property('status');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \" \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"//pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должоыбыть найдены коментарии у заданного события\", function () {\r",
							"    pm.expect(target.length).to.gte(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId?from=0&size=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен совпадать с отпрваленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий обновлен администратором\",\r\n    \"state\": \"PUBLISHED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/admin/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"admin",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка удалить  чужой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
							"    pm.expect(target).to.have.property('status');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий 2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"//pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должоыбыть найдены коментарии у заданного события\", function () {\r",
							"    pm.expect(target.length).to.gte(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/admin?from=0&size=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"admin"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "state",
							"value": "PUBLISHED",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех опубликованных комментариев администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"//pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должоыбыть найдены коментарии у заданного события\", function () {\r",
							"    pm.expect(target.length).to.gte(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/admin?from=0&size=2&state=PUBLISHED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"admin"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "state",
							"value": "PUBLISHED"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев (общий)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"//pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"У события должны быть найдены опубликованные комментарии\", function () {\r",
							"    pm.expect(target.length).to.gte(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"event",
						":eventId"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "2",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария пользователем после удаления",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/user/:userId/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"user",
						":userId",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария администратором (отклонение)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, eventId, userId\", function (){\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property(\"event\");\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('createdOn');\r",
							"    pm.expect(target).to.have.property('state');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).equal(source.text, 'Обновленный комментарий должен совпадать с отпрваленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Комментарий обновлен администратором\",\r\n    \"state\": \"CANCELED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/admin/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"admin",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев (общий) должен быть пустой список",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response; // получаем объект Response и сохраняем его в переменную serverResponse\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"//pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"У события должны быть найдены опубликованные комментарии\", function () {\r",
							"    pm.expect(target.length).to.gte(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"event",
						":eventId"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "2",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}